RKM = rep(reach.meta.aggregate$GenRKM[1:(length(reach.meta.aggregate$GenRKM))],
length(StudyID)),
reach_num = rep(seq(0, (nrow(reach.meta.aggregate))-1, 1), length(StudyID))
) %>%
left_join(
reach.meta.aggregate %>%
select(GEN, Region) %>%
distinct(),
by = c("GEN")
) %>%
mutate(
cum.phi = round(cum.phi, digits = 2),
cum.phi.se = round(cum.phi.se, digits = 2),
LCI = round(LCI, digits = 2),
UCI = round(UCI, digits = 2),
'Survival estimate (SE)' = paste0(cum.phi, " (", as.character(cum.phi.se), ")"),
'Reach #' = reach_num,
) %>%
filter(
GEN != "GoldenGateW"
)
}
plot_cum_surv <- function(cum_survival_all, add_breaks, multiple, padding = 5.5,
text_size = 20) {
# Plot cumulative survival outputs from Mark model
#
# Arguments:
#  cum_survival_all: cumulative survival outputs from Mark model,
#     must be formatted with (format_cum_surv) first
#  add_breaks: TRUE/FALSE whether to add vertical line breaks to represent
#     regions
#  multiple: TRUE/FALSE, whether there are multiple studyIDs or not
#  padding: leftside plot margin, default set to 5.5 good for most, but can
#     be adjusted of the xaxis label too long and gets cut off
#
# Return:
#  plot of cumulative survival with estimate and error bars representing LCI, UCI
# Create the levels order
lvls <- cum_survival_all %>%
select(GEN) %>%
distinct() %>%
pull()
if (multiple) {
cum_survival_all %>%
mutate(
GEN = factor(GEN, levels = lvls)
) %>%
ggplot(mapping = aes(x = GEN, y = cum.phi, group = studyID)) +
geom_point(size = 2, aes(color = studyID)) +
geom_errorbar(mapping = aes(x= GEN, ymin = LCI, ymax = UCI,
color = studyID),  width = .1) +
geom_line(size = 0.7, aes(color = studyID)) +
{if(add_breaks)geom_vline(xintercept = region_breaks, linetype = "dotted")} +
ylab("Cumulative survival") +
xlab("Receiver Location") +
scale_y_continuous(breaks = seq(0, 1, 0.1)) +
# scale_x_continuous(breaks = 0:max(cum_survival_all$reach_num)) +
# NEEDS TO BE FIXED FOR IF THERE ARE MORE THEN 2 STUDYIDS
scale_color_manual(values=c("#007EFF", "#FF8100")) +
theme_classic() +
theme(
panel.border = element_rect(colour = "black", fill=NA, size=.5),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
plot.margin = margin(5.5, 5.5, 5.5, padding, "pt"),
legend.position = "top",
text = element_text(size=text_size)
)
} else {
cum_survival_all %>%
mutate(
# GEN = factor(GEN, levels = reach.meta.aggregate$GEN,
#              labels = paste0(reach.meta.aggregate$GEN, " (",
#                              reach.meta.aggregate$GenRKM, ")"))
GEN = factor(GEN, levels = lvls)
) %>%
ggplot(mapping = aes(x = GEN, y = cum.phi)) +
geom_point(size = 2) +
geom_errorbar(mapping = aes(x= GEN, ymin = LCI, ymax = UCI),  width = .1) +
geom_line(size = 0.7, group = 1) +
{if(add_breaks)geom_vline(xintercept = region_breaks, linetype = "dotted")} +
ylab("Cumulative survival") +
xlab("Receiver Location") +
scale_y_continuous(breaks = seq(0, 1, 0.1)) +
# scale_x_continuous(breaks = 0:max(cum_survival_all$GEN)) +
theme_classic() +
theme(
panel.border = element_rect(colour = "black", fill=NA, size=.5),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
plot.margin=unit(c(.5,.5,.5,.5), "cm"),
text = element_text(size=text_size)
)
}
}
pivot_cum_surv <- function (p){
df <- p %>%
pivot_wider(names_from = studyID, values_from = c("Survival estimate (SE)",
"LCI", "UCI"),
names_glue = "{studyID} {.value}")
prefixes <- unique(cum_survival_all$studyID)
names_to_order <- map(prefixes, ~ names(df)[grep(paste0(.x, " "), names(df))]) %>% unlist
names_id <- setdiff(names(df), names_to_order)
df <- df %>%
select(names_id, names_to_order)
}
# Identify StudyIDs with multiple release locations -----------------------
find_multi_release_loc <- function(studyid_list) {
rel_loc <- TaggedFish %>%
filter(study_id %in% studyid_list) %>%
select(study_id, release_location) %>%
distinct() %>%
group_by(study_id) %>%
filter(n() > 1)
}
StudyID <- "Wild_stock_Chinook_Rbdd_2021"
detect_file <- paste0('detections/', studyID, ".csv")
detections <- vroom(detect_file)
reach.meta <- get_receiver_GEN(detections)
# Check for any GenRKM above release RKM for the studyID
reach.meta %>%
filter(
GenRKM > TaggedFish %>%
filter(study_id == StudyID) %>%
distinct(release_river_km) %>%
mutate(release_river_km = as.numeric(release_river_km)) %>%
pull()
)
# Visually inspect receiver locations, determine if sites need to be removed
leaflet(data = reach.meta) %>%
addTiles() %>%
addMarkers(lng = ~GenLon, lat = ~GenLat, label = ~GEN,
labelOptions = labelOptions(noHide = T))
# Check for any duplicate GenRKM
reach.meta %>%
group_by(GenRKM) %>%
filter(n() > 1)
reach.meta <- reach.meta %>%
filter(
!GEN %in% c("Mill_Ck_Conf", "GCID", "GCID_Main", "GCID_Conf"),
!is.na(Region),
!Region %in% c("North Delta", "South Delta", "East Delta", "West Delta",
"Yolo Bypass") |
GEN %in% c("ChippsE", "ChippsW")
)
# 3. Using the replacement dictionary, aggregate the detections
aggregated <- aggregate_GEN(detections)
# 5. Create an encounter history from the aggregated detections
EH <- make_EH(aggregated)
# 6. Create an inp from the given encounter history
inp <- create_inp(aggregated, EH)
# Get river KM
KM <- reach.meta.aggregate$GenRKM
# Get the reach lengths per 10km
reach_length <- round((abs(diff(KM))/10), digits = 3)
# Get the estimates
reach_surv <- get_mark_model(inp, standardized = T, multiple = F)
cleanup(ask = F)
# Format the estimates table
reach_surv_formatted <- format_phi(reach_surv, multiple = F)
reach_surv_formatted
# 1. Get the cumulative survival estimates
cum_surv <- get_cum_survival(inp, add_release = T)
cum_surv
# 1. Get the cumulative survival estimates
cum_surv <- get_cum_survival(inp, add_release = F)
cum_surv
all.inp <- inp
inp
add_release = T
all.process <- process.data(all.inp, model = "CJS", begin.time = 1)
all.process
all.process
all.ddl <- make.design.data(all.process)
all.ddl
rm(list=ls(pattern="Phi.t"))
rm(list=ls(pattern="p.t"))
p.t <- list(formula= ~time)
p.t
Phi.t <- list(formula= ~time)
Phi.t
cml = create.model.list("CJS")
model.outputs <- mark.wrapper(cml, data=all.process, ddl=all.ddl, realvcv = TRUE)
reaches <- nchar(all.inp$ch[1]) - 1
reaches
phi.t <- model.outputs$Phi.t.p.t$results$real$estimate[1:reaches]
phi.t.vcv <- model.outputs$Phi.t.p.t$results$real.vcv
phi.t
phi.t.vcv
cum.phi <- cumprod(phi.t)
cum.phi
?deltamethod.special
1:reaches
# calculate standard errors for the cumulative product.
cum.phi.se <- deltamethod.special("cumprod", phi.t[1:reaches],
phi.t.vcv[1:(reaches),1:(reaches)])
cum.phi.se
### Output estimate, SE, LCI, UCI to a dataframe
cumulative <- data.frame(cum.phi = cum.phi, cum.phi.se = cum.phi.se,
LCI = expit(logit(cum.phi)-1.96*sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))),
UCI = expit(logit(cum.phi)+1.96*sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))))
# Need to create logit() and expit() functions because they're not updated in clusterPower package
expit <- function(x){
out <- exp(x) / (1 + exp(x))
return(out)
}
logit <- function(p){
out <- log(p) / log(1-p)
return(out)
}
### Output estimate, SE, LCI, UCI to a dataframe
cumulative <- data.frame(cum.phi = cum.phi, cum.phi.se = cum.phi.se,
LCI = expit(logit(cum.phi)-1.96*sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))),
UCI = expit(logit(cum.phi)+1.96*sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))))
cumulative
cum.phi
cum.phi
logit(cum.phi)
logit(cum.phi)-1.96
logit(cum.phi)-1.96*sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))
expit(logit(cum.phi)-1.96*sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2)))
?compute.real
cum.phi
phi.t
phi.t.vcv
model.outputs
reaches
all.ddl
model.outputs
compute.real()
compute.real(all.ddl)
process.data
?process.data
make.design.data
?make.design.data
?mark.wrapper
compute.real(model.outputs, data = all.inp)
all.inp
all.ddl
compute.real(model.outputs)
compute.real(model.outputs, data=all.ddl)
compute.real(model.outputs, data=all.ddl$Phi)
compute.real(model.outputs, data=all.ddl$p)
compute.real(model.outputs, data=all.inp$ch)
logit(cum.phi)
expit(logit(cum.phi) - 1.96 * logit(cum.phi.se))
### Output estimate, SE, LCI, UCI to a dataframe
cumulative <- data.frame(cum.phi = cum.phi,
cum.phi.se = cum.phi.se,
LCI = expit(logit(cum.phi) - 1.96 * logit(cum.phi.se)),
UCI = expit(logit(cum.phi) + 1.96 * logit(cum.phi.se)))
cumulative
### Output estimate, SE, LCI, UCI to a dataframe
cumulative <- data.frame(cum.phi = cum.phi,
cum.phi.se = cum.phi.se,
LCI = cum.phi - 1.96 * cum.phi.se,
UCI = cum.phi + 1.96 * cum.phi.se)
cumulative
# Round to 3 digits
cumulative <- round(cumulative,3)
cumulative
# If add_release TRUE, add in the dummy row to the top which just represents
# survival of 100% at release
if (add_release == T) {
cumulative <- cumulative %>%
add_row(
.before = 1,
cum.phi = 1,
cum.phi.se = NA,
LCI = NA,
UCI = NA
) %>%
mutate(
StudyID = all.inp$StudyID[1]
)
}else {
cumulative <- cumulative %>%
mutate(
StudyID = all.inp$StudyID[1]
)
}
cumulative
log(cum.phi)
cum.phi
logit(cum.phi)
cum.phi.se^2
exp(logit(cum.phi))
cum.phi
-2log(0)
-2*log(0)
30*ln(1)
30*log(1)
0-2*0
logLik(0)
exp(logLik(0))
### Output estimate, SE, LCI, UCI to a dataframe
cumulative <- data.frame(cum.phi = cum.phi,
cum.phi.se = cum.phi.se,
# LCI = cum.phi - 1.96 * cum.phi.se,
# UCI = cum.phi + 1.96 * cum.phi.se)
LCI = expit(logit(cum.phi)-1.96*sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))),
UCI = expit(logit(cum.phi)+1.96*sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))))
cumulative
logit(cum.phi)
### Output estimate, SE, LCI, UCI to a dataframe
cumulative <- data.frame(cum.phi = cum.phi,
cum.phi.se = cum.phi.se,
# LCI = cum.phi - 1.96 * cum.phi.se,
# UCI = cum.phi + 1.96 * cum.phi.se)
LCI = expit(logit(cum.phi) - 1.96 * sqrt(cum.phi.se^2/(((logit(cum.phi))/(1+(logit(cum.phi)))^2)^2))),
UCI = expit(logit(cum.phi) + 1.96 * sqrt(cum.phi.se^2/(((logit(cum.phi))/(1+(logit(cum.phi)))^2)^2))))
cumulative
### Output estimate, SE, LCI, UCI to a dataframe
cumulative <- data.frame(cum.phi = cum.phi,
cum.phi.se = cum.phi.se,
# LCI = cum.phi - 1.96 * cum.phi.se,
# UCI = cum.phi + 1.96 * cum.phi.se)
LCI = expit(logit(cum.phi) - 1.96 * sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))),
UCI = expit(logit(cum.phi) + 1.96 * sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))))
cumulative
phi.t
phi.t.vcv <- model.outputs$Phi.t.p.t$results$real.vcv
phi.t.vcv
cum.phi <- cumprod(phi.t)
cum.phi
?deltamethod.special
deltamethod.special("cumprod", phi.t[1:reaches])
# calculate standard errors for the cumulative product.
cum.phi.se <- deltamethod.special("cumprod", phi.t[1:reaches],
phi.t.vcv[1:(reaches),1:(reaches)])
cum.phi.se
# Need to create logit() and expit() functions because they're not updated in clusterPower package
expit <- function(x){
out <- 1 / (1 + exp(-x))
return(out)
}
### Output estimate, SE, LCI, UCI to a dataframe
cumulative <- data.frame(cum.phi = cum.phi,
cum.phi.se = cum.phi.se,
# LCI = cum.phi - 1.96 * cum.phi.se,
# UCI = cum.phi + 1.96 * cum.phi.se)
LCI = expit(logit(cum.phi) - 1.96 * sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))),
UCI = expit(logit(cum.phi) + 1.96 * sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))))
cumulative
# Need to create logit() and expit() functions because they're not updated in clusterPower package
expit <- function(x){
out <- exp(x) / (1 + exp(x))
return(out)
}
logit <- function(p){
out <- log(p) / log(1-p)
return(out)
}
logit <- function(p){
out <- log(p/(1-p))
return(out)
}
### Output estimate, SE, LCI, UCI to a dataframe
cumulative <- data.frame(cum.phi = cum.phi,
cum.phi.se = cum.phi.se,
# LCI = cum.phi - 1.96 * cum.phi.se,
# UCI = cum.phi + 1.96 * cum.phi.se)
LCI = expit(logit(cum.phi) - 1.96 * sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))),
UCI = expit(logit(cum.phi) + 1.96 * sqrt(cum.phi.se^2/((exp(logit(cum.phi))/(1+exp(logit(cum.phi)))^2)^2))))
cumulative
StudyID <- "Wild_stock_Chinook_Rbdd_2021"
# 2. Read the detections and get the receiver GEN data; if detections file
# has not been saved for the studyID yet, run save_new_detections.R first
detect_file <- paste0('detections/', studyID, ".csv")
detections <- vroom(detect_file)
reach.meta <- get_receiver_GEN(detections)
# QA the detections for
# -duplicate GenRKM with different names
# -GEN that is above the release RKM
# Check for any GenRKM above release RKM for the studyID
reach.meta %>%
filter(
GenRKM > TaggedFish %>%
filter(study_id == StudyID) %>%
distinct(release_river_km) %>%
mutate(release_river_km = as.numeric(release_river_km)) %>%
pull()
)
# Visually inspect receiver locations, determine if sites need to be removed
leaflet(data = reach.meta) %>%
addTiles() %>%
addMarkers(lng = ~GenLon, lat = ~GenLat, label = ~GEN,
labelOptions = labelOptions(noHide = T))
# Check for any duplicate GenRKM
reach.meta %>%
group_by(GenRKM) %>%
filter(n() > 1)
# Remove GEN as necessary
# reach.meta <- reach.meta %>%
#   filter(!GEN %in% c("INSERT_RECEIVER_LOCATIONS_TO_REMOVE_HERE"))
reach.meta <- reach.meta %>%
filter(
!GEN %in% c("Mill_Ck_Conf", "GCID", "GCID_Main", "GCID_Conf"),
!is.na(Region),
!Region %in% c("North Delta", "South Delta", "East Delta", "West Delta",
"Yolo Bypass") |
GEN %in% c("ChippsE", "ChippsW")
)
# 3. Using the replacement dictionary, aggregate the detections
aggregated <- aggregate_GEN(detections)
# 5. Create an encounter history from the aggregated detections
EH <- make_EH(aggregated)
# 6. Create an inp from the given encounter history
inp <- create_inp(aggregated, EH)
# 7. Run reach per 10km survival in Mark using the inp
# Get river KM
KM <- reach.meta.aggregate$GenRKM
# Get the reach lengths per 10km
reach_length <- round((abs(diff(KM))/10), digits = 3)
# Get the estimates
reach_surv <- get_mark_model(inp, standardized = T, multiple = F)
cleanup(ask = F)
# Format the estimates table
reach_surv_formatted <- format_phi(reach_surv, multiple = F)
write_csv(reach_surv_formatted, paste0("./Survival/Reach Survival per 10km/",
studyID, "_reach_survival.csv"))
write_csv(reach_surv_formatted, paste0("./Survival/Reach Survival per 10km/",
studyID, "_reach_survival.csv"))
write_csv(reach_surv_formatted, paste0("/Survival/Reach Survival per 10km/",
studyID, "_reach_survival.csv"))
write_csv(reach_surv_formatted, paste0("./Survival/Reach Survival per 10km/",
studyID, "_reach_survival.csv"))
reach_surv_formatted
write_csv(reach_surv_formatted, paste0("./Survival/Reach Survival per 10km/",
studyID, "_reach_survival.csv"))
setwd("C:/Users/pgcar/Google Drive/1 Work/1 NOAA UCSC AT/1 Projects/JSATS data explorer/data")
cum_surv_formatted
write_csv(cum_surv_formatted, paste0("./data/Survival/Cumulative Survival/",
studyID, "_cum_survival.csv"))
setwd("C:/Users/pgcar/Google Drive/1 Work/1 NOAA UCSC AT/1 Projects/JSATS data explorer/data/Survival/Reach Survival Per 10km")
reach_surv_formatted
setwd("C:/Users/pgcar/Google Drive/1 Work/1 NOAA UCSC AT/1 Projects/JSATS data explorer/data")
reach_surv_formatted
reach_surv_formatted
write_csv(reach_surv_formatted, paste0("./Survival/Reach Survival per 10km/",
studyID, "_reach_survival.csv"))
setwd("C:/Users/pgcar/Google Drive/1 Work/1 NOAA UCSC AT/1 Projects/JSATS data explorer/data/Survival/Reach Survival Per 10km")
write.csv(reach_surv_formatted, "Wild_stock_Chinook_Rbdd_2021_read_survival.csv"
)
# 1. Get the cumulative survival estimates
cum_surv <- get_cum_survival(inp, add_release = T)
# 2. Format the estimates table
cum_surv_formatted <- format_cum_surv(cum_surv)
# Add in unique fish counts at each GEN and lat/lon
cum_surv_formatted <- cum_surv_formatted %>%
left_join(
fish_count %>%
select(GEN, count) %>%
distinct()
) %>%
mutate_if(is.numeric, coalesce, 0) %>%
left_join(
reach.meta.aggregate %>%
select(GEN, GenLat, GenLon)
)
cum_surv_formatted
cum_surv_formatted %>%
left_join(
fish_count %>%
select(GEN, count) %>%
distinct()
)
fish_count
fish_count
fish_count <- get_unique_detects(aggregated)
fish_count
cum_surv_formatted %>%
left_join(
fish_count %>%
select(GEN, count) %>%
distinct()
)
cum_surv_formatted %>%
left_join(
fish_count %>%
select(GEN, count) %>%
distinct()
) %>%
mutate_if(is.numeric, coalesce, 0) %>%
left_join(
reach.meta.aggregate %>%
select(GEN, GenLat, GenLon)
)
# Add in unique fish counts at each GEN and lat/lon
cum_surv_formatted <- cum_surv_formatted %>%
left_join(
fish_count %>%
select(GEN, count) %>%
distinct()
) %>%
mutate_if(is.numeric, coalesce, 0) %>%
left_join(
reach.meta.aggregate %>%
select(GEN, GenLat, GenLon)
)
cum_surv_formatted
setwd("C:/Users/pgcar/Google Drive/1 Work/1 NOAA UCSC AT/1 Projects/JSATS data explorer/data/Survival/Cumulative Survival")
write_csv(cum_surv_formatted, paste0("./data/Survival/Cumulative Survival/",
studyID, "_cum_survival.csv"))
write_csv(cum_surv_formatted,"Wild_stock_Chinook_Rbdd_2021_cum_survival.csv"
)
getwd()
write_csv(cum_surv_formatted,"Wild_stock_Chinook_Rbdd_2021_cum_survival.csv")
write.csv(cum_surv_formatted,"Wild_stock_Chinook_Rbdd_2021_cum_survival.csv")
write.csv(cum_surv_formatted, "Wild_stock_Chinook_Rbdd_2021_cum_survival.csv")
showConnections()
cleanup(ask = F)
cum_surv_formatted
write_csv(cum_surv_formatted,"Wild_stock_Chinook_Rbdd_2021_cum_survival.csv")
